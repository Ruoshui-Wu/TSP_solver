import os
import numpy as np
import torch
from utils import load_model
from matplotlib import pyplot as plt

# function to load the pretrained model
def make_oracle(model, xy, temperature=1.0):
    num_nodes = len(xy)

    xyt = torch.tensor(xy).float()[None]  # Add batch dimension

    with torch.no_grad():  # Inference only
        embeddings, _ = model.embedder(model._init_embed(xyt))

        # Compute keys, values for the glimpse and keys for the logits once as they can be reused in every step
        fixed = model._precompute(embeddings)

    def oracle(tour):
        with torch.no_grad():  # Inference only
            # Input tour with 0 based indices
            # Output vector with probabilities for locations not in tour
            tour = torch.tensor(tour).long()

            if len(tour) == 0:
                step_context = model.W_placeholder
            else:
                step_context = torch.cat((embeddings[0, tour[0]], embeddings[0, tour[-1]]), -1)

            # Compute query = context node embedding, add batch and step dimensions (both 1)
            query = fixed.context_node_projected + model.project_step_context(step_context[None, None, :])

            # Create the mask and convert to bool depending on PyTorch version
            mask = torch.zeros(num_nodes, dtype=torch.uint8) > 0
            mask[tour] = 1
            mask = mask[None, None, :]  # Add batch and step dimension

            log_p, _ = model._one_to_many_logits(query, fixed.glimpse_key, fixed.glimpse_val, fixed.logit_key, mask)
            p = torch.softmax(log_p / temperature, -1)[0, 0]
            assert (p[tour] == 0).all()
            assert (p.sum() - 1).abs() < 1e-5
            # assert np.allclose(p.sum().item(), 1)
        return p.numpy()

    return oracle


# function to visualize the tour generated by pretrained model
def plot_tsp(xy, tour, ax1):
    """
    Plot the TSP tour on matplotlib axis ax1.
    """

    ax1.set_xlim(0, 1)
    ax1.set_ylim(0, 1)

    xs, ys = xy[tour].transpose()
    # compute the difference of adjacent nodes
    dx = np.roll(xs, -1) - xs
    dy = np.roll(ys, -1) - ys
    d = np.sqrt(dx * dx + dy * dy)
    lengths = d.cumsum()

    # Scatter nodes
    ax1.scatter(xs, ys, s=40, color='blue')
    # Starting node
    ax1.scatter([xs[0]], [ys[0]], s=100, color='red')

    # Arcs
    qv = ax1.quiver(
        xs, ys, dx, dy,
        scale_units='xy',
        angles='xy',
        scale=1,
    )

    ax1.set_title('{} nodes, total length {:.2f}'.format(len(tour), lengths[-1]))


if __name__ == '__main__':

    # creat random map, the (x,y) coordinates of each city
    xy = np.random.rand(100, 2)

    # choose model, set evaluate mode
    model, _ = load_model('pretrained/tsp_20/')
    model.eval()  # Put in evaluation mode to not track gradients

    # generate tour of the map using pretrained model
    oracle = make_oracle(model, xy)

    sample = False
    tour = []
    tour_p = []
    while (len(tour) < len(xy)):
        p = oracle(tour)  # p is probability(WuTao's notes)

        if sample:
            # Advertising the Gumbel-Max trick
            g = -np.log(-np.log(np.random.rand(*p.shape)))
            i = np.argmax(np.log(p) + g)
            # i = np.random.multinomial(1, p)
        else:
            # Greedy
            i = np.argmax(p)
        tour.append(i)
        tour_p.append(p)

    # plot the result
    fig, ax = plt.subplots(figsize=(10, 10))
    plot_tsp(xy, tour, ax)
    plt.show()